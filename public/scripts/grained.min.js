/*! Grained.min.js
 * Author : Sarath Saleem  - https://github.com/sarathsaleem
 * MIT license: http://opensource.org/licenses/MIT
 * GitHub : https://github.com/sarathsaleem/grained
 * v0.0.2
 */
!(function (e, t) {
  'use strict'
  e.grained = function e(n, i) {
    var a,
      r,
      o,
      $,
      l,
      d = null,
      g = null,
      s = null
    if (
      ('string' == typeof n
        ? (d = t.getElementById(n.split('#')[1]))
        : 'object' == typeof n && (d = n),
      d)
    )
      g = d.id
    else {
      console.error('Grained: cannot find the element with id ' + n)
      return
    }
    'absolute' !== d.style.position && (d.style.position = 'relative'),
      (d.style.overflow = 'hidden')
    var h = ['', '-moz-', '-o-animation-', '-webkit-', '-ms-'],
      m = {
        animate: !0,
        patternWidth: 100,
        patternHeight: 100,
        grainOpacity: 0.1,
        grainDensity: 1,
        grainWidth: 1,
        grainHeight: 1,
        grainChaos: 0.5,
        grainSpeed: 20,
      }
    Object.keys(i).forEach(function (e) {
      m[e] = i[e]
    })
    for (
      var p = (function () {
          var e = t.createElement('canvas'),
            n = e.getContext('2d')
          ;(e.width = m.patternWidth), (e.height = m.patternHeight)
          for (var i = 0; i < m.patternWidth; i += m.grainDensity)
            for (var a = 0; a < m.patternHeight; a += m.grainDensity) {
              var r = (256 * Math.random()) | 0
              ;(n.fillStyle = 'rgba(' + [r, r, r, m.grainOpacity].join() + ')'),
                n.fillRect(i, a, m.grainWidth, m.grainHeight)
            }
          return e.toDataURL('image/png')
        })(),
        f = '',
        y = [
          '0%:-10%,10%',
          '10%:-25%,0%',
          '20%:-30%,10%',
          '30%:-30%,30%',
          '40%::-20%,20%',
          '50%:-15%,10%',
          '60%:-20%,20%',
          '70%:-5%,20%',
          '80%:-25%,5%',
          '90%:-30%,25%',
          '100%:-10%,10%',
        ],
        c = h.length;
      c--;

    ) {
      f += '@' + h[c] + 'keyframes grained{'
      for (var u = 0; u < y.length; u++) {
        var _ = y[u].split(':')
        ;(f += _[0] + '{'),
          (f += h[c] + 'transform:translate(' + _[1] + ');'),
          (f += '}')
      }
      f += '}'
    }
    var v = t.getElementById('grained-animation')
    v && v.parentElement.removeChild(v)
    var b = t.createElement('style')
    ;(b.type = 'text/css'),
      (b.id = 'grained-animation'),
      (b.innerHTML = f),
      t.body.appendChild(b)
    var E = t.getElementById('grained-animation-' + g)
    E && E.parentElement.removeChild(E),
      ((b = t.createElement('style')).type = 'text/css'),
      (b.id = 'grained-animation-' + g),
      t.body.appendChild(b)
    var C = 'background-image: url(' + p + ');'
    if (
      ((C +=
        'position: absolute;content: "";height: 300%;width: 300%;left: -100%;top: -100%;'),
      (c = h.length),
      m.animate)
    )
      for (; c--; )
        (C += h[c] + 'animation-name:grained;'),
          (C += h[c] + 'animation-iteration-count: infinite;'),
          (C += h[c] + 'animation-duration: ' + m.grainChaos + 's;'),
          (C +=
            h[c] +
            'animation-timing-function: steps(' +
            m.grainSpeed +
            ', end);')
    ;(s = '#' + g + '::before'),
      (a = b.sheet),
      (r = s),
      (o = C),
      (l = ''),
      (l = r.length ? r + '{' + o + '}' : o),
      'insertRule' in a
        ? a.insertRule(l, $)
        : 'addRule' in a && a.addRule(r, o, $)
  }
})(window, document)
